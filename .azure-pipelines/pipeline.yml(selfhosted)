trigger: none

schedules:
- cron: "0 2 1 * *"
  displayName: Monthly – 1st @ 02:00 UTC
  branches: { include: [ main ] }
  always: true

parameters:
- name: run_mode
  type: string
  default: ByCustodian
  values: [ ByCustodian, AllADH ]

- name: adh_group
  type: string
  default: ""

- name: adh_groups_list
  type: object
  default: []

- name: adh_subscription_type
  type: string
  default: DEV
  values: [ DEV, PRD, NONPRD ]

- name: list_agent_provider
  type: string
  default: selfhosted
  values: [ hosted, selfhosted ]

- name: poolType
  type: string
  default: self
  values: [ hosted, self ]

- name: overrideSelfHostedPool
  type: string
  default: ""

- name: sharedSelfHostedPool
  type: string
  default: SanityChecks-Shared

- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'

- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'

- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'

# ---------- COMPILE-TIME VARIABLES (avoid coalesce/inline indexing) ----------
variables:
# default
- name: selfHostedPoolSingle
  value: ''

# prefer explicit override if provided
- ${{ if ne(parameters.overrideSelfHostedPool, '') }}:
  - name: selfHostedPoolSingle
    value: ${{ parameters.overrideSelfHostedPool }}

# otherwise build "<adh_group>_<adh_subscription_type>"
- ${{ if and(eq(variables.selfHostedPoolSingle, ''), ne(parameters.adh_group, '')) }}:
  - name: selfHostedPoolSingle
    value: ${{ format('{0}_{1}', parameters.adh_group, parameters.adh_subscription_type) }}

# compute first custodian for list runs (used to pick pool name)
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

# ---------- SINGLE CUSTODIAN ----------
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), eq(length(parameters.adh_groups_list), 0)) }}:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ variables.selfHostedPoolSingle }}

  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ variables.selfHostedPoolSingle }}

  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ variables.selfHostedPoolSingle }}

  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ variables.selfHostedPoolSingle }}

  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ variables.selfHostedPoolSingle }}

# ---------- MULTI-CUSTODIAN (serial) ----------
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: MultiCustodian_Serial
    displayName: "Sanity checks (multi-custodian serial)"
    ${{ if eq(parameters.list_agent_provider, 'hosted') }}:
      pool:
        vmImage: 'windows-latest'
    ${{ if ne(parameters.list_agent_provider, 'hosted') }}:
      pool:
        name: ${{ format('{0}_{1}', variables.firstCustodian, parameters.adh_subscription_type) }}
    variables:
    - group: modernization_tfstate_backend_details
    jobs:
    - job: Serial_Run
      displayName: "Process custodians serially"
      steps:
      - checkout: self

      - task: PowerShell@2
        displayName: Prepare artifact folders
        inputs:
          targetType: inline
          pwsh: true
          script: |
            $paths = @(
              "$(Build.ArtifactStagingDirectory)/rg-perms",
              "$(Build.ArtifactStagingDirectory)/rg-tags",
              "$(Build.ArtifactStagingDirectory)/kv-secrets",
              "$(Build.ArtifactStagingDirectory)/kv-perms",
              "$(Build.ArtifactStagingDirectory)/kv-firewall"
            )
            foreach($p in $paths){
              if(-not (Test-Path -LiteralPath $p)){ New-Item -ItemType Directory -Path $p -Force | Out-Null }
              Write-Host "Prepared: $p"
            }

      - ${{ each cust in parameters.adh_groups_list }}:
        - task: PowerShell@2
          displayName: "RG Permissions – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)"
              -ClientId "$(backend_client_id)"
              -ClientSecret "$(backend_client_secret)"
              -ProdCsvPath "${{ parameters.prodCsvPath }}"
              -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
              -adh_group "${{ cust }}"
              -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms"
              -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "RG Tags – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-RG-Tags.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)"
              -ClientId "$(backend_client_id)"
              -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}"
              -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags"
              -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Secrets – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Secrets-ByCustodian.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)"
              -ClientId "$(backend_client_id)"
              -ClientSecret "$(backend_client_secret)"
              -SecretCsvPath "${{ parameters.kvSecretsCsvPath }}"
              -adh_group "${{ cust }}"
              -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets"
              -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Permissions – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Permissions.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)"
              -ClientId "$(backend_client_id)"
              -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}"
              -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms"
              -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Firewall – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Networks.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)"
              -ClientId "$(backend_client_id)"
              -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}"
              -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall"
              -BranchName "$(Build.SourceBranchName)"
          pwsh: true

      - task: PublishBuildArtifacts@1
        displayName: Publish rg-perms
        inputs: { PathtoPublish: '$(Build.ArtifactStagingDirectory)/rg-perms', ArtifactName: 'rg-perms' }
      - task: PublishBuildArtifacts@1
        displayName: Publish rg-tags
        inputs: { PathtoPublish: '$(Build.ArtifactStagingDirectory)/rg-tags', ArtifactName: 'rg-tags' }
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-secrets
        inputs: { PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-secrets', ArtifactName: 'kv-secrets' }
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-perms
        inputs: { PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-perms', ArtifactName: 'kv-perms' }
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-firewall
        inputs: { PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-firewall', ArtifactName: 'kv-firewall' }

# ---------- ALL ADH ----------
- ${{ if eq(parameters.run_mode, 'AllADH') }}:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ parameters.sharedSelfHostedPool }}

  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ parameters.sharedSelfHostedPool }}

  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ parameters.sharedSelfHostedPool }}

  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ parameters.sharedSelfHostedPool }}

  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPool: ${{ parameters.sharedSelfHostedPool }}
