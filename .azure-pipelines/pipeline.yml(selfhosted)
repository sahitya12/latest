trigger: none

schedules:
- cron: "0 2 1 * *"
  displayName: Monthly – 1st @ 02:00 UTC
  branches:
    include:
    - main
  always: true

# ---------------- PARAMETERS ----------------
parameters:
- name: run_mode
  type: string
  default: ByCustodian
  values: [ ByCustodian, AllADH ]

# Single custodian (used when adh_groups_list is empty)
- name: adh_group
  type: string
  default: ""

# Multi-custodian as a list (serial). Example: ["CSM","NHH","MDH"]
- name: adh_groups_list
  type: object
  default: []

# Lowercase only, as requested
- name: adh_subscription_type
  type: string
  default: prd
  values: [ prd, nonprd ]

# Agent provider for LIST runs
- name: list_agent_provider
  type: string
  default: selfhosted
  values: [ hosted, selfhosted ]

# For single-custodian & AllADH stage-templates
- name: poolType
  type: string
  default: self
  values: [ hosted, self ]

# Optional: the Self-hosted Agent POOL name (not agent name). Example: "SanityChecksPool"
- name: selfHostedPoolName
  type: string
  default: ""

# Input CSVs in repo
- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'

# ---------------- COMPILE-TIME VARIABLES ----------------
variables:
# firstCustodian for list runs
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

# ---------------- VALIDATION (warn-only) ----------------
stages:
- stage: Validate
  displayName: Validate parameters
  pool:
    vmImage: 'windows-latest'
  jobs:
  - job: check
    steps:
    - powershell: |
        Write-Host "run_mode               = '${{ parameters.run_mode }}'"
        Write-Host "adh_group              = '${{ parameters.adh_group }}'"
        Write-Host "adh_groups_list length = ${{ length(parameters.adh_groups_list) }}"
        Write-Host "adh_subscription_type  = '${{ parameters.adh_subscription_type }}'"
        Write-Host "poolType               = '${{ parameters.poolType }}'"
        Write-Host "list_agent_provider    = '${{ parameters.list_agent_provider }}'"
        Write-Host "selfHostedPoolName     = '${{ parameters.selfHostedPoolName }}'"

        # Gentle warnings instead of hard-fail:
        if ('${{ parameters.poolType }}' -eq 'self' -and [string]::IsNullOrWhiteSpace('${{ parameters.selfHostedPoolName }}')) {
          Write-Warning "poolType=self but selfHostedPoolName is empty. You must provide a POOL name (not agent) to run on self-hosted."
        }
        if ('${{ parameters.run_mode }}' -eq 'AllADH' -and '${{ parameters.poolType }}' -eq 'self' -and [string]::IsNullOrWhiteSpace('${{ parameters.selfHostedPoolName }}')) {
          Write-Warning "AllADH + self-hosted requires 'selfHostedPoolName' (POOL)."
        }
      displayName: Parameter echo & soft checks

# --------------------------- SINGLE CUSTODIAN ---------------------------
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), eq(length(parameters.adh_groups_list), 0)) }}:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: ByCustodian
      adh_group: ${{ parameters.adh_group }}
      adh_groups: ''
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

# ----------------------- MULTI-CUSTODIAN (serial) -----------------------
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: MultiCustodian_Serial
    displayName: "Sanity checks (multi-custodian serial)"
    ${{ if eq(parameters.list_agent_provider, 'hosted') }}:
      pool:
        vmImage: 'windows-latest'
    ${{ if ne(parameters.list_agent_provider, 'hosted') }}:
      pool:
        name: ${{ parameters.selfHostedPoolName }}
        demands:
        - custodian -equals ${{ format('{0}_{1}', variables.firstCustodian, parameters.adh_subscription_type) }}
    variables:
    - group: modernization_tfstate_backend_details
    jobs:
    - job: Serial_Run
      displayName: "Process custodians serially"
      steps:
      - checkout: self

      - task: PowerShell@2
        displayName: Prepare artifact folders
        inputs:
          targetType: inline
          pwsh: true
          script: |
            $paths = @(
              "$(Build.ArtifactStagingDirectory)/rg-perms",
              "$(Build.ArtifactStagingDirectory)/rg-tags",
              "$(Build.ArtifactStagingDirectory)/kv-secrets",
              "$(Build.ArtifactStagingDirectory)/kv-perms",
              "$(Build.ArtifactStagingDirectory)/kv-firewall"
            )
            foreach($p in $paths){
              if(-not (Test-Path -LiteralPath $p)){ New-Item -ItemType Directory -Path $p -Force | Out-Null }
              Write-Host "Prepared: $p"
            }

      - ${{ each cust in parameters.adh_groups_list }}:
        - task: PowerShell@2
          displayName: "RG Permissions – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
              -ProdCsvPath "${{ parameters.prodCsvPath }}" -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
              -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "RG Tags – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-RG-Tags.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags" -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Secrets – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Secrets-ByCustodian.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
              -SecretCsvPath "${{ parameters.kvSecretsCsvPath }}"
              -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets" -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Permissions – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Permissions.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms" -BranchName "$(Build.SourceBranchName)"
          pwsh: true

        - task: PowerShell@2
          displayName: "KV Firewall – ${{ cust }}"
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)/sanitychecks/scripts/Scan-KV-Networks.ps1'
            workingDirectory: '$(Build.SourcesDirectory)/sanitychecks/scripts'
            arguments: >
              -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
              -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall" -BranchName "$(Build.SourceBranchName)"
          pwsh: true

      - task: PublishBuildArtifacts@1
        displayName: Publish rg-perms
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/rg-perms'
          ArtifactName: 'rg-perms'
      - task: PublishBuildArtifacts@1
        displayName: Publish rg-tags
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/rg-tags'
          ArtifactName: 'rg-tags'
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-secrets
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-secrets'
          ArtifactName: 'kv-secrets'
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-perms
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-perms'
          ArtifactName: 'kv-perms'
      - task: PublishBuildArtifacts@1
        displayName: Publish kv-firewall
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/kv-firewall'
          ArtifactName: 'kv-firewall'

# ----------------------------- ALL ADH -----------------------------
- ${{ if eq(parameters.run_mode, 'AllADH') }}:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}

  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: ${{ parameters.adh_subscription_type }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: ${{ parameters.poolType }}
      selfHostedPoolName: ${{ parameters.selfHostedPoolName }}
